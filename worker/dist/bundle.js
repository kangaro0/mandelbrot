!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(1),o=r(4),i=new n.w3cwebsocket("ws://192.168.0.85:9030");i.onmessage=function(e){var t=JSON.parse(e.data),r=function(e){for(var t=e.config,r=e.canvas,n=t.i_max+(t.i_min-t.i_max)*e.row/r.height,o=t.escape*t.escape,i=new Array(0),s=0;s<r.width;s++){for(var c=t.r_min+(t.r_max-t.r_min)*s/r.width,u=0,a=0,l=0,p=0,d=0;d<t.max_iter&&l+p<o;++d)a=2*u*a+n,l=(u=l-p+c)*u,p=a*a;d===t.max_iter&&(d=-1),i.push(d)}return i}(t.content),n={type:o.MessageType.ROW,content:{row:t.content.row,data:r}};i.send(JSON.stringify(n))}},function(e,t,r){var n=function(){return this}(),o=n.WebSocket||n.MozWebSocket,i=r(2);function s(e,t){return t?new o(e,t):new o(e)}o&&["CONNECTING","OPEN","CLOSING","CLOSED"].forEach(function(e){Object.defineProperty(s,e,{get:function(){return o[e]}})}),e.exports={w3cwebsocket:o?s:null,version:i}},function(e,t,r){e.exports=r(3).version},function(e){e.exports={_from:"websocket",_id:"websocket@1.0.28",_inBundle:!1,_integrity:"sha512-00y/20/80P7H4bCYkzuuvvfDvh+dgtXi5kzDf3UcZwN6boTYaKvsrtZ5lIYm1Gsg48siMErd9M4zjSYfYFHTrA==",_location:"/websocket",_phantomChildren:{},_requested:{type:"tag",registry:!0,raw:"websocket",name:"websocket",escapedName:"websocket",rawSpec:"",saveSpec:null,fetchSpec:"latest"},_requiredBy:["#USER","/"],_resolved:"https://registry.npmjs.org/websocket/-/websocket-1.0.28.tgz",_shasum:"9e5f6fdc8a3fe01d4422647ef93abdd8d45a78d3",_spec:"websocket",_where:"D:\\JavaScript\\mandelbrot\\worker",author:{name:"Brian McKelvey",email:"theturtle32@gmail.com",url:"https://github.com/theturtle32"},browser:"lib/browser.js",bugs:{url:"https://github.com/theturtle32/WebSocket-Node/issues"},bundleDependencies:!1,config:{verbose:!1},contributors:[{name:"IÃ±aki Baz Castillo",email:"ibc@aliax.net",url:"http://dev.sipdoc.net"}],dependencies:{debug:"^2.2.0",nan:"^2.11.0","typedarray-to-buffer":"^3.1.5",yaeti:"^0.0.6"},deprecated:!1,description:"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",devDependencies:{"buffer-equal":"^1.0.0",faucet:"^0.0.1",gulp:"git+https://github.com/gulpjs/gulp.git#4.0","gulp-jshint":"^2.0.4",jshint:"^2.0.0","jshint-stylish":"^2.2.1",tape:"^4.9.1"},directories:{lib:"./lib"},engines:{node:">=0.10.0"},homepage:"https://github.com/theturtle32/WebSocket-Node",keywords:["websocket","websockets","socket","networking","comet","push","RFC-6455","realtime","server","client"],license:"Apache-2.0",main:"index",name:"websocket",repository:{type:"git",url:"git+https://github.com/theturtle32/WebSocket-Node.git"},scripts:{gulp:"gulp",install:"(node-gyp rebuild 2> builderror.log) || (exit 0)",test:"faucet test/unit"},version:"1.0.28"}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.CONFIGURATION=0]="CONFIGURATION",e[e.RESET=1]="RESET",e[e.ROW=2]="ROW",e[e.TASK=3]="TASK"}(t.MessageType||(t.MessageType={}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,