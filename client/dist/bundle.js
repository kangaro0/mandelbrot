!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(1),r=n(4);let i,s,c,l=0,u=Date.now(),a=[];window.onload=(()=>{i=document.getElementById("canvas"),s=i.getContext("2d"),(c=document.getElementById("reset")).onclick=(()=>{let e={type:r.MessageType.RESET};d.send(JSON.stringify(e)),l=0}),function(){function e(e){return(e=(e+256&511)-256)<0&&(e=-e),e}for(let t=0;t<=4096;t++)a.push([e(7*t),e(5*t),e(11*t)])}();let e={type:r.MessageType.CONFIGURATION,content:{width:i.clientWidth,height:i.clientHeight}};d.send(JSON.stringify(e))});let d=new o.w3cwebsocket("ws://localhost:9030");d.onopen=(()=>{console.log("WebSocket-Connection established")}),d.onmessage=(e=>{let t=JSON.parse(e.data).content;if(t.row===i.clientHeight-1){console.log("Generation: "+l);let e=Date.now();console.log("Time elapsed: "+(u-e)/1e3+" s"),u=e,l++}!function(e){let t=s.createImageData(i.clientWidth,1),n=t.data,o=e.data;for(let e=0;e<t.width;e++){let t=4*e,r=4*e+1,i=4*e+2;if(n[4*e+3]=255,o[e]<0)n[t]=n[r]=n[i]=0;else{let s=a[o[e]];n[t]=s[0],n[r]=s[1],n[i]=s[2]}}s.putImageData(t,0,e.row)}(t)})},function(e,t,n){var o=function(){return this}(),r=o.WebSocket||o.MozWebSocket,i=n(2);function s(e,t){return t?new r(e,t):new r(e)}r&&["CONNECTING","OPEN","CLOSING","CLOSED"].forEach(function(e){Object.defineProperty(s,e,{get:function(){return r[e]}})}),e.exports={w3cwebsocket:r?s:null,version:i}},function(e,t,n){e.exports=n(3).version},function(e){e.exports={_from:"websocket",_id:"websocket@1.0.28",_inBundle:!1,_integrity:"sha512-00y/20/80P7H4bCYkzuuvvfDvh+dgtXi5kzDf3UcZwN6boTYaKvsrtZ5lIYm1Gsg48siMErd9M4zjSYfYFHTrA==",_location:"/websocket",_phantomChildren:{},_requested:{type:"tag",registry:!0,raw:"websocket",name:"websocket",escapedName:"websocket",rawSpec:"",saveSpec:null,fetchSpec:"latest"},_requiredBy:["#USER","/"],_resolved:"https://registry.npmjs.org/websocket/-/websocket-1.0.28.tgz",_shasum:"9e5f6fdc8a3fe01d4422647ef93abdd8d45a78d3",_spec:"websocket",_where:"D:\\JavaScript\\mandelbrot\\client",author:{name:"Brian McKelvey",email:"theturtle32@gmail.com",url:"https://github.com/theturtle32"},browser:"lib/browser.js",bugs:{url:"https://github.com/theturtle32/WebSocket-Node/issues"},bundleDependencies:!1,config:{verbose:!1},contributors:[{name:"IÃ±aki Baz Castillo",email:"ibc@aliax.net",url:"http://dev.sipdoc.net"}],dependencies:{debug:"^2.2.0",nan:"^2.11.0","typedarray-to-buffer":"^3.1.5",yaeti:"^0.0.6"},deprecated:!1,description:"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",devDependencies:{"buffer-equal":"^1.0.0",faucet:"^0.0.1",gulp:"git+https://github.com/gulpjs/gulp.git#4.0","gulp-jshint":"^2.0.4",jshint:"^2.0.0","jshint-stylish":"^2.2.1",tape:"^4.9.1"},directories:{lib:"./lib"},engines:{node:">=0.10.0"},homepage:"https://github.com/theturtle32/WebSocket-Node",keywords:["websocket","websockets","socket","networking","comet","push","RFC-6455","realtime","server","client"],license:"Apache-2.0",main:"index",name:"websocket",repository:{type:"git",url:"git+https://github.com/theturtle32/WebSocket-Node.git"},scripts:{gulp:"gulp",install:"(node-gyp rebuild 2> builderror.log) || (exit 0)",test:"faucet test/unit"},version:"1.0.28"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.CONFIGURATION=0]="CONFIGURATION",e[e.RESET=1]="RESET",e[e.ROW=2]="ROW",e[e.TASK=3]="TASK"}(t.MessageType||(t.MessageType={}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,